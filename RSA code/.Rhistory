currentObjects,
softPrefValue,
mapUttToObjProbs,
mapUttToPref
)
mapUttToObjToPref <-
getMapUttToObjToPref(
currentObjects,
targetFeatureNum,
relevantUtterances,
allUtterancePref,
allObjects,
mapUttToPref
)
#cat("mapUttToObjToPref", print(mapUttToObjToPref))
#obj <- listenerObjChoice(mapUttToObjToPref, utterance)
# obj <- blockdata$simulatedAnswer[trial]
# obj <- blockdata$simulatedAnswerObjNum
obj <- 1
preferencesPriorAll <-
simplePragmaticSpeakerWithPrefPriorAll(
utterance,
obj,
preferencesPriorAll, # taking posterior from previous trial
relevantUtterances,
currentObjects,
mapUttToObjProbs,
objectPreferenceSoftPriors
)
# cat("preferencesPrior", preferencesPrior, "\n")
inputData$preferencesPrior1[row] <-
preferencesPriorAll[preferencesPriorIndices[1]]
inputData$preferencesPrior2[row] <-
preferencesPriorAll[preferencesPriorIndices[2]]
inputData$preferencesPrior3[row] <-
preferencesPriorAll[preferencesPriorIndices[3]]
#  }}} # temporary
evalNumModel <-
evaluate(allUtterancePref, preferencesPriorAll, targetFeatureNum)
inputData$evalNumModel[row] <- evalNumModel
humanResponse <-
c(
blockdata$normResponse0[trial],
blockdata$normResponse1[trial],
blockdata$normResponse2[trial]
)
evalNum <-
evaluate(allUtterancePref, humanResponse, targetFeatureNum)
inputData$evalNum[row] <- evalNum
#cat("evalNumModel", evalNumModel, "\n")
}
}
}
inputData$evalNum <- as.factor(inputData$evalNum)
inputData$evalNumModel <- as.factor(inputData$evalNumModel)
inputDataCondensed <-
subset(inputData, trialNum == 3)
inputDataCondensed$ambiguousUtteranceCount <-
as.factor(inputDataCondensed$ambiguousUtteranceCount)
inputDataCondensedCompare <-
subset(
inputDataCondensed,
select = c(
normResponse0,
preferencesPrior1,
normResponse1,
preferencesPrior2,
normResponse2,
preferencesPrior3
)
)
#
# dat <- data.frame(evalNumModel = 1:400, evalNumHuman = 1:400)
# for (i in c(1:length(evalNumHumanCollected))) {
#   dat$evalNumModel[i] <- evalNumModelCollected[[i]]
#   dat$evalNumHuman[i] <- evalNumHumanCollected[[i]]
# }
ambiguityUsed <- matrix(nrow = totalWorker + 1, ncol = 2)
for (worker in c(0:totalWorker)) {
ambiguityUsed[worker + 1, 1] <-
unique(inputData$workerid)[worker + 1]
ambiguityUsed[worker + 1, 2] <-
round(sum(inputData$ambiguous[which(inputData$workerid == unique(inputData$workerid)[worker +
1])]) / 16 *
100, digits = 1)
}
ambiguousWorker <-
subset(ambiguityUsed, ambiguityUsed[, 2] > quantile(ambiguityUsed[, 2], 0.75))[, 1]
inputDataAmbiguous <-
subset(inputData, workerid %in% ambiguousWorker)
nonAmbiguousWorker <-
subset(ambiguityUsed, ambiguityUsed[, 2] < quantile(ambiguityUsed[, 2], 0.25))[, 1]
inputDataNonAmbiguous <-
subset(inputData, workerid %in% nonAmbiguousWorker)
# ambiguousWorkerWOambiguityblock <- subset(ambiguityUsedWOambiguityblock, ambiguityUsedWOFirstBlock[,2]>75)[,1]
# inputDataAmbiguousWOFirstBlock <- subset(inputData, workerid %in% ambiguousWorkerWOFirstBlock)
inputDataCondensedAmbiguous <-
subset(inputDataCondensed, workerid %in% ambiguousWorker)
inputDataCondensedAmbiguousEqual <-
subset(inputDataCondensedAmbiguous, evalNum == evalNumModel)
inputDataCondensedEqual <-
subset(inputDataCondensed, evalNum == evalNumModel)
# inputDataCondensedAmbiguousCompare <- subset(inputDataCondensedAmbiguous, select = c(normResponse0,preferencesPrior1, normResponse1,preferencesPrior2, normResponse2, preferencesPrior3))
# inputDataCondensedAmbiguousEqualCompare <- subset(inputDataCondensedAmbiguousEqual, select = c(normResponse0,preferencesPrior1, normResponse1,preferencesPrior2, normResponse2, preferencesPrior3))
response0 <-
subset(inputDataCondensedAmbiguous,
select = c(normResponse0, preferencesPrior1))
response1 <-
subset(inputDataCondensedAmbiguous,
select = c(normResponse1, preferencesPrior2))
response2 <-
subset(inputDataCondensedAmbiguous,
select = c(normResponse2, preferencesPrior3))
colnames(response0) <- c("normResponse", "preferencesPrior")
colnames(response1) <- c("normResponse", "preferencesPrior")
colnames(response2) <- c("normResponse", "preferencesPrior")
inputDataCondensedAmbiguousCompare <-
rbind(response0, response1, response2)
# inputDataCondensedAmbiguousEqualCompare
response0 <-
subset(inputDataCondensedAmbiguousEqual,
select = c(normResponse0, preferencesPrior1))
response1 <-
subset(inputDataCondensedAmbiguousEqual,
select = c(normResponse1, preferencesPrior2))
response2 <-
subset(inputDataCondensedAmbiguousEqual,
select = c(normResponse2, preferencesPrior3))
colnames(response0) <- c("normResponse", "preferencesPrior")
colnames(response1) <- c("normResponse", "preferencesPrior")
colnames(response2) <- c("normResponse", "preferencesPrior")
inputDataCondensedAmbiguousEqualCompare <-
rbind(response0, response1, response2)
# inputDataCondensedCompare
response0 <-
subset(inputDataCondensed,
select = c(normResponse0, preferencesPrior1))
response1 <-
subset(inputDataCondensed,
select = c(normResponse1, preferencesPrior2))
response2 <-
subset(inputDataCondensed,
select = c(normResponse2, preferencesPrior3))
colnames(response0) <- c("normResponse", "preferencesPrior")
colnames(response1) <- c("normResponse", "preferencesPrior")
colnames(response2) <- c("normResponse", "preferencesPrior")
inputDataCondensedCompare <- rbind(response0, response1, response2)
roundingDigits <- 2
bothTables <-
rbind(data.frame(table(inputDataCondensed$evalNum)), data.frame(table(inputDataCondensed$evalNumModel)))
HumanOrModel = rep(c("Human", "Model"), each = length(bothTables$Freq) /
2)
tabledEvalNum <- data.frame(bothTables, HumanOrModel)
totalTrialsWOFirstBlock <-
sum(tabledEvalNum$Freq[HumanOrModel == "Human"])
tabledEvalNum$relativeFreq <-
round(tabledEvalNum$Freq / totalTrialsWOFirstBlock, digits = roundingDigits)
learningProcessDataWithFirstBlock <-
data.frame(
inputData$trialNum,
inputData$blockNr,
inputData$evalNum,
inputData$evalNumModel
)
learningProcessData <-
subset(learningProcessDataWithFirstBlock, inputData.blockNr != 0)
summary(learningProcessData)
humanLearningProcess <-
as.data.frame(
table(
learningProcessData$inputData.trialNum,
learningProcessData$inputData.evalNum
)
)
humanLearningProcess$relativeFreq <-
round(humanLearningProcess$Freq / totalTrialsWOFirstBlock,
digits = roundingDigits)
humanLearnProcPlot <-
ggplot(data = humanLearningProcess, aes(x = Var1, y = relativeFreq, fill =
Var2)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(
aes(label = relativeFreq),
vjust = -0.3,
color = "black",
position = position_dodge(0.9),
size = 2
) +
labs(
title = "Human learning process, first block excluded\n",
x = "Trial",
y = "Frequency",
fill = "Evaluation\nNumber\n"
) + coord_cartesian(ylim = c(0, 0.65))
modelLearningProcess <-
as.data.frame(
table(
learningProcessData$inputData.trialNum,
learningProcessData$inputData.evalNumModel
)
)
modelLearningProcess$relativeFreq <-
round(modelLearningProcess$Freq / totalTrialsWOFirstBlock,
digits = roundingDigits)
modelLearnProcPlot <-
ggplot(data = modelLearningProcess, aes(x = Var1, y = relativeFreq, fill =
Var2)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(
aes(label = relativeFreq * 100),
vjust = -0.3,
color = "black",
position = position_dodge(0.9),
size = 2
) +
labs(
title = "Model learning process, first block excluded\n",
x = "Trial",
y = "Frequency",
fill = "Evaluation\nNumber\n"
) + coord_cartesian(ylim = c(0, 0.65))
bothTablesWithFirstBlock <-
rbind(data.frame(table(inputDataCondensed$evalNum)), data.frame(table(inputDataCondensed$evalNumModel)))
HumanOrModel = rep(c("Human", "Model"),
each = length(bothTablesWithFirstBlock$Freq) /
2)
HumanOrModelWithFirstBlock = rep(c("Human", "Model"),
each = length(bothTablesWithFirstBlock$Freq) / 2)
tabledEvalNumWithFirstBlock <-
data.frame(bothTablesWithFirstBlock, HumanOrModelWithFirstBlock)
totalTrialsWithFirstBlock <-
sum(tabledEvalNumWithFirstBlock$Freq[HumanOrModel == "Human"])
tabledEvalNumWithFirstBlock$relativeFreq <-
round(tabledEvalNumWithFirstBlock$Freq / totalTrialsWithFirstBlock,
digits = roundingDigits)
evalNumCompairPlotWithFirstBlock <-
ggplot(data = tabledEvalNumWithFirstBlock,
aes(x = Var1, y = relativeFreq, fill = HumanOrModelWithFirstBlock)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(
aes(label = relativeFreq * 100),
vjust = -0.3,
color = "black",
position = position_dodge(0.9),
size = 2
) +
labs(
title = "Learning success compared, first block included\n",
x = "Evaluation Number",
y = "Frequency",
fill = ""
) + coord_cartesian(ylim = c(0, 0.65))
evalNumCompairPlotWithFirstBlock
modelLearningProcess <-
as.data.frame(
table(
learningProcessData$inputData.trialNum,
learningProcessData$inputData.evalNumModel
)
)
modelLearningProcess$relativeFreq <-
round(modelLearningProcess$Freq / totalTrialsWOFirstBlock,
digits = roundingDigits)
modelLearnProcPlot <-
ggplot(data = modelLearningProcess, aes(x = Var1, y = relativeFreq, fill =
Var2)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(
aes(label = relativeFreq * 100),
vjust = -0.3,
color = "black",
position = position_dodge(0.9),
size = 2
) +
labs(
title = "Model learning process, first block excluded\n",
x = "Trial",
y = "Frequency",
fill = "Evaluation\nNumber\n"
) + coord_cartesian(ylim = c(0, 0.65))
modelLearnProcPlot
bothTablesWithFirstBlock <-
rbind(data.frame(table(inputDataCondensed$evalNum)), data.frame(table(inputDataCondensed$evalNumModel)))
HumanOrModel = rep(c("Human", "Model"),
each = length(bothTablesWithFirstBlock$Freq) /
2)
HumanOrModelWithFirstBlock = rep(c("Human", "Model"),
each = length(bothTablesWithFirstBlock$Freq) / 2)
tabledEvalNumWithFirstBlock <-
data.frame(bothTablesWithFirstBlock, HumanOrModelWithFirstBlock)
totalTrialsWithFirstBlock <-
sum(tabledEvalNumWithFirstBlock$Freq[HumanOrModel == "Human"])
tabledEvalNumWithFirstBlock$relativeFreq <-
round(tabledEvalNumWithFirstBlock$Freq / totalTrialsWithFirstBlock,
digits = roundingDigits)
evalNumCompairPlotWithFirstBlock <-
ggplot(data = tabledEvalNumWithFirstBlock,
aes(x = Var1, y = relativeFreq, fill = HumanOrModelWithFirstBlock)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(
aes(label = relativeFreq * 100),
vjust = -0.3,
color = "black",
position = position_dodge(0.9),
size = 2
) +
labs(
title = "Learning success compared, first block included\n",
x = "Evaluation Number",
y = "Frequency",
fill = ""
) + coord_cartesian(ylim = c(0, 0.65))
evalNumCompairPlotWithFirstBlock
humanLearningProcessWithFirstBlock$datattype <- "human"
modelLearningProcessWithFirstBlock$datatype <- "model"
colnames(humanLearningProcessWithFirstBlock) <-
c("trialNum",
"evalNum",
"humanFreq",
"relativeFreq",
"datatype")
colnames(modelLearningProcessWithFirstBlock) <-
c("trialNum",
"evalNum",
"modelFreq",
"relativeFreq",
"datatype")
titles <-
c(
"Learning Trajectory compared \nAll data",
"Learning Trajectory compared \nOnly data from subjects who picked ambiguous utterances",
"Learning Trajectory compared \nOnly data  from subjects who didn't pick ambiguous utterances"
)
learningProcessLinePlot <- ggplot() +
# blue plot
geom_line(
data = humanLearningProcessWithFirstBlock,
aes(
x = trialNum,
y = relativeFreq,
color = evalNum,
group = evalNum,
linetype = datatype
)
) +
# red plot
geom_line(
data = modelLearningProcessWithFirstBlock,
aes(
x = trialNum,
y = relativeFreq,
color = evalNum,
group = evalNum,
linetype = datatype
)
) +
coord_cartesian(ylim = c(0, 0.8))  +
labs(
title = titles[datasetNum],
x = "Trial Number",
y = "Frequency [%]",
color = "Evaluation\nNumber\n",
group = "Evaluation\nNumber\n",
linetype = ""
)
for (datasetNum in c(1:3)) {
if (datasetNum == 1) {
dataset <- inputData
} else if (datasetNum == 2) {
dataset <- inputDataAmbiguous
} else if (datasetNum == 3) {
dataset <- inputDataNonAmbiguous
}
total <- length(dataset$workerid) %/% maxTrialNum
learningProcessDataWithFirstBlock <-
data.frame(dataset$trialNum,
dataset$blockNr,
dataset$evalNum,
dataset$evalNumModel)
summary(learningProcessDataWithFirstBlock)
colnames(learningProcessDataWithFirstBlock) <-
c("trialNum", "blockNr", "evalNum", "evalNumModel")
humanLearningProcessWithFirstBlock <-
as.data.frame(
table(
learningProcessDataWithFirstBlock$trialNum,
learningProcessDataWithFirstBlock$evalNum
)
)
humanLearningProcessWithFirstBlock$relativeFreq <-
round(humanLearningProcessWithFirstBlock$Freq / total,
digits = roundingDigits)
modelLearningProcessWithFirstBlock <-
as.data.frame(
table(
learningProcessDataWithFirstBlock$trialNum,
learningProcessDataWithFirstBlock$evalNumModel
)
)
modelLearningProcessWithFirstBlock$relativeFreq <-
round(modelLearningProcessWithFirstBlock$Freq / total,
digits = roundingDigits)
humanLearningProcessWithFirstBlock$datattype <- "human"
modelLearningProcessWithFirstBlock$datatype <- "model"
colnames(humanLearningProcessWithFirstBlock) <-
c("trialNum",
"evalNum",
"humanFreq",
"relativeFreq",
"datatype")
colnames(modelLearningProcessWithFirstBlock) <-
c("trialNum",
"evalNum",
"modelFreq",
"relativeFreq",
"datatype")
titles <-
c(
"Learning Trajectory compared \nAll data",
"Learning Trajectory compared \nOnly data from subjects who picked ambiguous utterances",
"Learning Trajectory compared \nOnly data  from subjects who didn't pick ambiguous utterances"
)
learningProcessLinePlot <- ggplot() +
# blue plot
geom_line(
data = humanLearningProcessWithFirstBlock,
aes(
x = trialNum,
y = relativeFreq,
color = evalNum,
group = evalNum,
linetype = datatype
)
) +
# red plot
geom_line(
data = modelLearningProcessWithFirstBlock,
aes(
x = trialNum,
y = relativeFreq,
color = evalNum,
group = evalNum,
linetype = datatype
)
) +
coord_cartesian(ylim = c(0, 0.8))  +
labs(
title = titles[datasetNum],
x = "Trial Number",
y = "Frequency [%]",
color = "Evaluation\nNumber\n",
group = "Evaluation\nNumber\n",
linetype = ""
)
}
learningProcessLinePlot
humanAmbBlockEval <-
as.data.frame(table(
inputDataCondensed$ambiguousUtteranceCount,
inputDataCondensed$evalNum
))
modelAmbBlockEval <-
as.data.frame(
table(
inputDataCondensed$ambiguousUtteranceCount,
inputDataCondensed$evalNumModel
)
)
colnames(humanAmbBlockEval) <-
c("ambiguousUtteranceCount", "evaluationNumber", "Frequency")
colnames(modelAmbBlockEval) <-
c("ambiguousUtteranceCount", "evaluationNumber", "Frequency")
ambiguityBlockEvaluation <- ggplot() +
geom_line(
humanAmbBlockEval,
mapping = aes(
x = evaluationNumber,
y = Frequency,
color = ambiguousUtteranceCount,
group = ambiguousUtteranceCount
)
) +
geom_line(
modelAmbBlockEval,
mapping = aes(
x = evaluationNumber,
y = Frequency,
color = ambiguousUtteranceCount,
group = ambiguousUtteranceCount
),
linetype = "dashed"
) + labs(
title = "learning success depending on how many ambiguous \nutterances were picked in the block",
x = "Evaluation Number",
y = "Frequency",
color = "Ambiguous \nUtterances \nper Block\n",
group = "Ambiguous \nUtterances \nper Block\n"
)
ambiguityBlockEvaluation
ambiguityUsedArranged <- as.data.frame(table(ambiguityUsed[, 2]))
ambiguityUsePlot <-
ggplot(ambiguityUsedArranged, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity", width = 0.2) +
labs(
title = "Use of ambiguous utterances (of 16 Trials)\n",
x = "Number of Trials with ambiguous utterances",
y = "Participants using ambiguous utterances (of 100)",
fill = "Evaluation\nNumber\n"
) +
coord_flip()
ambiguityUsedArranged
ambiguityUsePlot
