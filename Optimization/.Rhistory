resultCode[6] <- matchF3_23 # redundant if matchF1==3; if matchF1==1 then value indidates 1/2 if the other two do not match / match
if(matchF3 == 2) {
if(matchF1 != 2 & matchF2 != 2) { # final swap object case
if(allFeatures[featureOrder[3]] == allFeatures[featureOrder[3]+6]) {
# swap second and third object, such that the second object is the one that matches in the third feature
objectConstellation <- replace(objectConstellation, c(2, 3), objectConstellation[c(3, 2)])
objectOrder <- replace(objectOrder, c(2,3), objectOrder[c(3,2)])
allFeatures <-  replace(allFeatures, c(4:9), allFeatures[c(7:9,4:6)])
}
}else{ ## order is already defined... thus, need to encode if second or third object matches with first (i.e. target) object in this case
if(allFeatures[featureOrder[3]] == allFeatures[featureOrder[3]+6]) {
resultCode[6] <- 2
}
}
}
# print("Final result after handling the third feature:")
# print(c("af:",allFeatures))
# print(c("fo:",featureOrder))
# print(c("oo:",objectOrder))
# print(c("oc:",objectConstellation))
#  print(resultCode)
res <- list(resultCode, featureOrder, objectOrder)
return(res)
}
# an object constellation is a 3-value vector \in {1,...,27]}^3
# this is the method that determines the utterance choice constellation code as well as the
# resulting feature order dependent on the individual feature value ambiguities.
getUtteranceChoiceConstellationCode <- function(objectConstellation) {
#  print(c("START with : ", objectConstellation))
allFeatures <- c(allObjectsToUtterancesMappings[objectConstellation[1],],
allObjectsToUtterancesMappings[objectConstellation[2],],
allObjectsToUtterancesMappings[objectConstellation[3],])
allUniqueFeatures <- sort(unique(allFeatures))
#
numShared <- rep(0,3) # maximum number of objects carying one feature value type
for(i in c(1:3)) {
numShared[i] = 4 - length(which(allUniqueFeatures > (i-1)*3 & allUniqueFeatures < 1+i*3))
}
# numShared specifies now the maximum number of feature values shared by each feature type
# i.e. 1 means that all three feature values are present, 2 means that two are present, 3 means that only one value is present (shared by all three)
allFeatNums <- rep(0,9) # vector of feature value occurrences for each object's feature values
for(i in c(1:9)) {
allFeatNums[i] <- length(which(allFeatures == allFeatures[i]))
}
#  print(c(allFeatures,allFeatNums,allUniqueFeatures,numShared))
## feature order
featureOrder <- c(1:3)
## object order
objectOrder <- c(1:3)
## result code
resultCode <- ""
if(min(numShared)==3) {
## three common values (i.e. identical objects)
resultCode <- "333"
}else if(max(numShared)==1) {
## no identical features, all different values!
resultCode <- "111"
}else if(max(numShared)==3) { # at least one common feature value in all three features(but not three) ...
if(length(which(numShared==3))==2) {
# exactly (332 / 331) two features share identical values across all thee objects.
onetwoIndex <- which(numShared < 3)
featureOrder[c(3,onetwoIndex)] <- featureOrder[c(onetwoIndex,3)]
### moving object with the lonely third feature value to the last position in the order
if(length(which(numShared==2)) == 1) {
if(length(which(allFeatures == allFeatures[featureOrder[2]]))==1) {
# moving first object to last position
objectOrder[c(1,3)] <- objectOrder[c(3,1)]
}else if(length(which(allFeatures == allFeatures[featureOrder[3]]))==1) {
# moving second object to last position
objectOrder[c(2,3)] <- objectOrder[c(3,2)]
}
resultCode <- "332"
}else{
resultCode <- "331"# when the last feature is different in all three, there is no need to rearrange the objects.
}
}else{
#### length(which(numShared==3))==1
## moving shared feature value to the first position
threeIndex <- which(numShared==3)
featureOrder[c(1,threeIndex)] <- featureOrder[c(threeIndex,1)] # swapping the feature order
numShared[c(1,threeIndex)] <- numShared[c(threeIndex,1)]
if(max(numShared[c(2,3)])==1) {
## done since both other features' feature values are uniqe to all objects
resultCode <- "311"
}else{
# "322a/322b/321 case"
#### move the object that shares a feature value with both others to position 1
if(allFeatNums[featureOrder[2]]==2 & allFeatNums[featureOrder[3]]==2) {
## first one is the one that shares with both others.
}else if(allFeatNums[3+featureOrder[2]]==2 & allFeatNums[3+featureOrder[3]]==2) {
## object order change...: move this object to the first position.
objectOrder[c(1,2)] <- objectOrder[c(2,1)]
allFeatNums[c(1,2,3,4,5,6)] <- allFeatNums[c(4,5,6,1,2,3)]
allFeatures[c(1,2,3,4,5,6)] <- allFeatures[c(4,5,6,1,2,3)]
}else if(allFeatNums[6+featureOrder[2]]==2 & allFeatNums[6+featureOrder[3]]==2) {
## object order change...: move this object to the first position.
objectOrder[c(1,3)] <- objectOrder[c(3,1)]
allFeatNums[c(1,2,3,7,8,9)] <- allFeatNums[c(7,8,9,1,2,3)]
allFeatures[c(1,2,3,7,8,9)] <- allFeatures[c(7,8,9,1,2,3)]
}
### 322a cases... need to make sure that the second object shares two values wth the first one.
if(allFeatNums[6+featureOrder[2]]==2 & allFeatNums[6+featureOrder[3]]==2) {
## object order change...: move this object to the second position.
objectOrder[c(2,3)] <- objectOrder[c(3,2)]
allFeatNums[c(4,5,6,7,8,9)] <- allFeatNums[c(7,8,9,4,5,6)]
allFeatures[c(4,5,6,7,8,9)] <- allFeatures[c(7,8,9,4,5,6)]
resultCode <- "322a"
}else if(allFeatNums[3+featureOrder[2]]==2 & allFeatNums[3+featureOrder[3]]==2) {
# second object is 2-2, that is, shares both double values with the first one...
# (third one has two unique values)
resultCode <- "322a"
}else if(min(numShared)==2) {
resultCode <- "322b"
}else{
# case 321 ... move the object that does not have the 2-shared value feature to position three.
if( ! (allFeatures[featureOrder[2]]==allFeatures[3+featureOrder[2]] |
allFeatures[featureOrder[3]]==allFeatures[3+featureOrder[3]]) ) {
objectOrder[c(2,3)] <- objectOrder[c(3,2)]
allFeatNums[c(4,5,6,7,8,9)] <- allFeatNums[c(7,8,9,4,5,6)]
allFeatures[c(4,5,6,7,8,9)] <- allFeatures[c(7,8,9,4,5,6)]
}
resultCode <- "321"
}
}
}
}else if(max(numShared)==2) {
# 22a2a / 22a2b / 22b2b / 221 / 211
# feature values shared by two and or one objects.
if(length(which(numShared==1))==2) { ## two objects share one feature value, the other ones are unique.
#211 case
## move the feature type that shares feature values to the front
twoIndex <- which(numShared==2)
featureOrder[c(1,twoIndex)] <- featureOrder[c(twoIndex,1)] # swapping the feature order moving the shared feature type to the front
## move the object that does not share feature values with the other two to the back (third object)
if(all(allFeatNums[1:3]==c(1,1,1))) { ## first object is the one with unique values -> reorder to being the third object
objectOrder[c(1,3)] <- objectOrder[c(3,1)]
allFeatNums[c(1,2,3,7,8,9)] <- allFeatNums[c(7,8,9,1,2,3)]
allFeatures[c(1,2,3,7,8,9)] <- allFeatures[c(7,8,9,1,2,3)]
}else if(all(allFeatNums[4:6]==c(1,1,1))) {## second object is the own with unique feature values -> reorder it to being the third object
objectOrder[c(2,3)] <- objectOrder[c(3,2)]
allFeatNums[c(4,5,6,7,8,9)] <- allFeatNums[c(7,8,9,4,5,6)]
allFeatures[c(4,5,6,7,8,9)] <- allFeatures[c(7,8,9,4,5,6)]
}
resultCode <- "211"
}else if(min(numShared)==1) {
# 22a1 / 22b1 -> object constellation examples: 147|148|259 / 147|158|249
oneSharedIndex <- which(numShared==1)
featureOrder[c(3,oneSharedIndex)] <- featureOrder[c(oneSharedIndex,3)] # swapping the feature order moving the un-shared feature type to the back
if(all(allFeatNums[1:3]==c(1,1,1))) {
objectOrder[c(1,3)] <- objectOrder[c(3,1)]
allFeatNums[c(1,2,3,7,8,9)] <- allFeatNums[c(7,8,9,1,2,3)]
allFeatures[c(1,2,3,7,8,9)] <- allFeatures[c(7,8,9,1,2,3)]
resultCode <- "22a1"
}else if(all(allFeatNums[4:6]==c(1,1,1))) {
objectOrder[c(2,3)] <- objectOrder[c(3,2)]
allFeatNums[c(4,5,6,7,8,9)] <- allFeatNums[c(7,8,9,4,5,6)]
allFeatures[c(4,5,6,7,8,9)] <- allFeatures[c(7,8,9,4,5,6)]
resultCode <- "22a1"
}else if(all(allFeatNums[7:9]==c(1,1,1))) {
resultCode <- "22a1"
}else if(sum(allFeatNums[7:9])==5) {
objectOrder[c(1,3)] <- objectOrder[c(3,1)]
allFeatNums[c(1,2,3,7,8,9)] <- allFeatNums[c(7,8,9,1,2,3)]
allFeatures[c(1,2,3,7,8,9)] <- allFeatures[c(7,8,9,1,2,3)]
resultCode <- "22b1"
}else if(sum(allFeatNums[4:6])==5) {
objectOrder[c(1,2)] <- objectOrder[c(2,1)]
allFeatNums[c(1,2,3,4,5,6)] <- allFeatNums[c(4,5,6,1,2,3)]
allFeatures[c(1,2,3,4,5,6)] <- allFeatures[c(4,5,6,1,2,3)]
resultCode <- "22b1"
}else if(sum(allFeatNums[1:3])==5) {
resultCode <- "22b1"
}
}else if(length(which(numShared==2))==3) {
# 22a2a / 22a2b / 22b2b -> object constellation examples: 147,147,258 / 147,148,257 / 147,158,257
if(sum(allFeatNums[1:3])==3) {
objectOrder[c(1,3)] <- objectOrder[c(3,1)]
allFeatNums[c(1,2,3,7,8,9)] <- allFeatNums[c(7,8,9,1,2,3)]
allFeatures[c(1,2,3,7,8,9)] <- allFeatures[c(7,8,9,1,2,3)]
resultCode <- "22a2a"
}else if(sum(allFeatNums[4:6])==3) {
objectOrder[c(2,3)] <- objectOrder[c(3,2)]
allFeatNums[c(4,5,6,7,8,9)] <- allFeatNums[c(7,8,9,4,5,6)]
allFeatures[c(4,5,6,7,8,9)] <- allFeatures[c(7,8,9,4,5,6)]
resultCode <- "22a2a"
}else if(sum(allFeatNums[7:9])==3) {
resultCode <- "22a2a"
}else{
# 22a2b / 22b2b
# moving the one with all features shared to the front
foundSix <- FALSE
if(sum(allFeatNums[1:3])==6) {
foundSix <- TRUE
}else if(sum(allFeatNums[4:6])==6) {
objectOrder[c(1,2)] <- objectOrder[c(2,1)]
allFeatNums[c(1,2,3,4,5,6)] <- allFeatNums[c(4,5,6,1,2,3)]
allFeatures[c(1,2,3,4,5,6)] <- allFeatures[c(4,5,6,1,2,3)]
foundSix <- TRUE
}else if(sum(allFeatNums[7:9])==6) {
objectOrder[c(1,3)] <- objectOrder[c(3,1)]
allFeatNums[c(1,2,3,7,8,9)] <- allFeatNums[c(7,8,9,1,2,3)]
allFeatures[c(1,2,3,7,8,9)] <- allFeatures[c(7,8,9,1,2,3)]
foundSix <- TRUE
}
##
if(sum(allFeatNums[7:9])==5 & foundSix) { # moving the one with 2 shared features to second
objectOrder[c(2,3)] <- objectOrder[c(3,2)]
allFeatNums[c(4,5,6,7,8,9)] <- allFeatNums[c(7,8,9,4,5,6)]
allFeatures[c(4,5,6,7,8,9)] <- allFeatures[c(7,8,9,4,5,6)]
}
if(foundSix) {
resultCode <- "22a2b"
# we are at an allFeatNums constellation of 222,221,112 here!!!
featSharedO13Index <- which(allFeatNums[c(7:9)]==2) # determine with feature is shared by the first and third object.
featureOrder[c(3,featSharedO13Index)] <- featureOrder[c(featSharedO13Index,3)] # move that feature to the third position
}else{
resultCode <- "22b2b" # ring of feature constellation.
# move 221 to the front - i.e., the object that shares two values.
if(all(allFeatNums[1:3] == c(2,2,1))) {
;
}else if( all(allFeatNums[4:6] == c(2,2,1))) {
objectOrder[c(1,2)] <- objectOrder[c(2,1)]
allFeatNums[c(1,2,3,4,5,6)] <- allFeatNums[c(4,5,6,1,2,3)]
allFeatures[c(1,2,3,4,5,6)] <- allFeatures[c(4,5,6,1,2,3)]
}else if( all(allFeatNums[7:9] == c(2,2,1))) {
objectOrder[c(1,3)] <- objectOrder[c(3,1)]
allFeatNums[c(1,2,3,7,8,9)] <- allFeatNums[c(7,8,9,1,2,3)]
allFeatures[c(1,2,3,7,8,9)] <- allFeatures[c(7,8,9,1,2,3)]
}
# finally, move 212 onto second
if( all(allFeatNums[4:6] == c(2,1,2))) {
}else if( all(allFeatNums[7:9] == c(2,1,2))) {
objectOrder[c(2,3)] <- objectOrder[c(3,2)]
allFeatNums[c(4,5,6,7,8,9)] <- allFeatNums[c(7,8,9,4,5,6)]
allFeatures[c(4,5,6,7,8,9)] <- allFeatures[c(7,8,9,4,5,6)]
}
}
}
}
}else{
print("ERROR -- case not covered!???? ")
print(objectConstellation)
}
###########################################
### finally, determining actual feature value order.
featureValueOrder <- rep(-1, length(allUniqueFeatures))
featureValueOrder[1] <- (allObjectsToUtterancesMappings[objectConstellation[objectOrder[1]],])[featureOrder[1]]
index <- 2
featureValueOrder[index] <- (allObjectsToUtterancesMappings[objectConstellation[objectOrder[2]],])[featureOrder[1]]
if(length(which(featureValueOrder[1:(index-1)]==featureValueOrder[index])) == 0) {index <- index+1} # new feature value added
featureValueOrder[index] <- (allObjectsToUtterancesMappings[objectConstellation[objectOrder[3]],])[featureOrder[1]]
if(length(which(featureValueOrder[1:(index-1)]==featureValueOrder[index])) == 0) {index <- index+1} # new feature value added
# second feature...
featureValueOrder[index] <- (allObjectsToUtterancesMappings[objectConstellation[objectOrder[1]],])[featureOrder[2]]
if(length(which(featureValueOrder[1:(index-1)]==featureValueOrder[index])) == 0) {index <- index+1} # new feature value added
featureValueOrder[index] <- (allObjectsToUtterancesMappings[objectConstellation[objectOrder[2]],])[featureOrder[2]]
if(length(which(featureValueOrder[1:(index-1)]==featureValueOrder[index])) == 0) {index <- index+1} # new feature value added
featureValueOrder[index] <- (allObjectsToUtterancesMappings[objectConstellation[objectOrder[3]],])[featureOrder[2]]
if(length(which(featureValueOrder[1:(index-1)]==featureValueOrder[index])) == 0) {index <- index+1} # new feature value added
# third feature...
featureValueOrder[index] <- (allObjectsToUtterancesMappings[objectConstellation[objectOrder[1]],])[featureOrder[3]]
if(length(which(featureValueOrder[1:(index-1)]==featureValueOrder[index])) == 0) {index <- index+1} # new feature value added
featureValueOrder[index] <- (allObjectsToUtterancesMappings[objectConstellation[objectOrder[2]],])[featureOrder[3]]
if(length(which(featureValueOrder[1:(index-1)]==featureValueOrder[index])) == 0) {index <- index+1} # new feature value added
featureValueOrder[index] <- (allObjectsToUtterancesMappings[objectConstellation[objectOrder[3]],])[featureOrder[3]]
if(length(which(featureValueOrder[1:(index-1)]==featureValueOrder[index])) == 0) {index <- index+1} else {featureValueOrder <- featureValueOrder[c(1:(length(featureValueOrder)-1))]} # new feature value added
## done :-)
#  print(c(numShared, allFeatNums))
res <- list(resultCode, featureOrder, objectOrder, featureValueOrder)
return(res)
}
# getUtteranceChoiceConstellationCode(c(1,5,12))
# codeFrame <- matrix(NA, 27**3, 11)
# colnames(codeFrame) <- c("o1", "o2", "o3", "code", "fOrder1", "fOrder2", "fOrder3", "oOrder1", "oOrder2", "oOrder3")
# codeFrame <- as.data.frame(codeFrame)
# codeFrame$objectNames <- matrix(0,27**3,9)
# for(i in c(1:27**3)) {
#   t <- i-1
#   codeFrame[[1]][i] <- 1+floor(t/729)
#   codeFrame[[2]][i] <- 1+floor((t%%729)/27)
#   codeFrame[[3]][i] <- 1+t%%27
#   res <- getUtteranceChoiceConstellationCode(c(codeFrame[[1]][i],codeFrame[[2]][i],codeFrame[[3]][i]))
#   codeFrame[[4]][i] <- res[[1]]
#   codeFrame[[5]][i] <- res[[2]][1]
#   codeFrame[[6]][i] <- res[[2]][2]
#   codeFrame[[7]][i] <- res[[2]][3]
#   codeFrame[[8]][i] <- res[[3]][1]
#   codeFrame[[9]][i] <- res[[3]][2]
#   codeFrame[[10]][i] <- res[[3]][3]
# }
# for(i in c(1:27**3)) {
#   t <- i-1
#   codeFrame[[1]][i] <- 1+floor(t/729)
#   codeFrame[[2]][i] <- 1+floor((t%%729)/27)
#   codeFrame[[3]][i] <- 1+t%%27
#   codeFrame$objectNames[i,] <- c(allObjects[codeFrame[[1]][i],],allObjects[codeFrame[[2]][i],],allObjects[codeFrame[[3]][i],])
# }
source("teamprojekt_CommonCode/AllUtterancesAndObjects.R")
source("CommonCode/getConstCodeStratUtt.R")
##########################################
source("teamprojekt_CommonCode/AllUtterancesAndObjects.R")
source("teamprojekt_CommonCode/getConstCodeStratUtt.R")
############################################################################################
procType <- 1   ###########################################################################
source("teamprojekt_CommonCode/SRSA_StratUtt.R")
source("teamprojekt_CommonCode/SRSA_StratUttOptimization_iterative.R")
##########################################
source("teamprojekt_CommonCode/AllUtterancesAndObjects.R")
source("teamprojekt_CommonCode/getConstCodeStratUtt.R")
getSimpleBestInfGainUttPreferencesIterative <- function(preferencesPriorAll,
currentObjects, softPrefValue,
notObeyInst, klValueFactor, targetFeature) {
relevantUtterances <- determineValidUtterances(currentObjects)
mapObjToUtt <- determineObjectToUtterancesMapping(currentObjects)
mapUttToObjProbs <- determineUtteranceToObjectProbabilities(relevantUtterances,
currentObjects,
mapObjToUtt, notObeyInst)
mapUttToObjDeterministic <- determineUtteranceToObjectProbabilities(relevantUtterances,
currentObjects,
mapObjToUtt, 0)
objectPreferenceSoftPriors <- getObjectPreferencePriors(relevantUtterances, currentObjects,
softPrefValue, mapUttToObjDeterministic)
preferencesPrior <- preferencesPriorAll[relevantUtterances]
# Define utterance prior excluding utterances of target feature
utterancePrior <- rep(0,length(relevantUtterances))
irrelevantIndices <- which(relevantUtterances>(3*(targetFeature-1)) & relevantUtterances<(3*targetFeature + 1))
validUtterances <- relevantUtterances[-irrelevantIndices]
utterancePriorShort <- rep (1/length(validUtterances),length(validUtterances))
utterancePrior[-irrelevantIndices] <- utterancePriorShort
#  preferencesPrior <- rep(1/(length(relevantUtterances)), length(relevantUtterances)+1)
#  preferencesPrior[length(relevantUtterances)+1] = 0
return( simpleBestInfGainUtteranceWithPrefPriorAll(preferencesPriorAll, relevantUtterances, currentObjects,
mapUttToObjProbs, objectPreferenceSoftPriors,
klValueFactor, targetFeature, utterancePrior) )
}
#### actual RSA model Kullback leibler divergence determination for utterance choice experiments.
# data is a matrix with data rows. column structure: [1:OC1,OC2,OC3,4:numUttOptions,6: picked utterance]
SimpleRSAModelUttKLDiv_3params_iterative <- function(data, par1, par2, par3) {
#   print(c(par1, par2, par3, data))
logLik <- 0
for(i in c(1:nrow(data))) {
if( (i-1)%%4 == 0) {
preferencesPriorAll <- getPreferencesPrior(data[i,5]) # focussing on the feature type in question.
}
## determining the object and utterance
currentObjects <- c(data[i,1],data[i,2],data[i,3])
uttFeat <- data[i,4]
targetFeat <- data[i, 5]
pickedUtterance <- data[i, 6]
relevantUtterances <- determineValidUtterances(currentObjects)
irrelevantIndices <- which(relevantUtterances>(3*(data[i,5]-1)) &
relevantUtterances<(3*data[i,5] + 1))
validUtterances <- relevantUtterances[-irrelevantIndices]
## determining the model predictions
bInfGainUttModel <- rep(NA, 9)
output <- getSimpleBestInfGainUttPreferencesIterative(preferencesPriorAll,currentObjects, abs(par1),
abs(par2), par3, targetFeat)
bInfGainUttModel[relevantUtterances] <- output[[1]]
preferencesPriorAll <- output[[2]][pickedUtterance,,1]
## adding the negative log likelihoods
logLik <- logLik - log(bInfGainUttModel[relevantUtterances[pickedUtterance]] + 1e-100)
#    print(logLik)
}
#  print(c("Result: ", llRes, par1, par2, par3) )
return(logLik)
}
SimpleRSAModelUttKLDivParamA_iterative <- function(par, data) {
return(SimpleRSAModelUttKLDiv_3params_iterative(data, abs(par[1]), 0, 1))
}
SimpleRSAModelUttKLDivParamB_iterative <- function(par, data) {
return(SimpleRSAModelUttKLDiv_3params_iterative(data, 0, abs(par[1]), 1))
}
SimpleRSAModelUttKLDivParamK_iterative <- function(par, data) {
return(SimpleRSAModelUttKLDiv_3params_iterative(data, 0, 0, par[1]))
}
SimpleRSAModelUttKLDivParamBK_iterative <- function(params, data) {
return(SimpleRSAModelUttKLDiv_3params_iterative(data, 0, abs(params[1]), params[2]))
}
SimpleRSAModelUttKLDivParamAK_iterative <- function(params, data) {
return(SimpleRSAModelUttKLDiv_3params_iterative(data, abs(params[1]), 0, params[2]))
}
SimpleRSAModelUttKLDivParamAK.2_iterative <- function(params, data) {
return(SimpleRSAModelUttKLDiv_3params_iterative(data, abs(params[1]), 0.2, params[2]))
}
SimpleRSAModelUttKLDivParamA.2_iterative <- function(par, data) {
return(SimpleRSAModelUttKLDiv_3params_iterative(data, abs(par[1]), 0.2, 1))
}
SimpleRSAModelUttKLDivParamB.2_iterative <- function(par, data) {
return(SimpleRSAModelUttKLDiv_3params_iterative(data, 0.2, abs(par[1]), 1))
}
SimpleRSAModelUttKLDivParamK.2.2_iterative <- function(par, data) {
return(SimpleRSAModelUttKLDiv_3params_iterative(data, 0.2, 0.2, par[1]))
}
SimpleRSAModelUttKLDivParamK.2.0_iterative <- function(par, data) {
return(SimpleRSAModelUttKLDiv_3params_iterative(data, 0.2, 0, par[1]))
}
SimpleRSAModelUttKLDivParamBK.2_iterative <- function(params, data) {
return(SimpleRSAModelUttKLDiv_3params_iterative(data, 0.2, abs(params[1]), params[2]))
}
SimpleRSAModelUttKLDivParamAK.2_iterative <- function(params, data) {
return(SimpleRSAModelUttKLDiv_3params_iterative(data, abs(params[1]), 0.2, params[2]))
}
SimpleRSAModelUttKLDivParamAB_iterative <- function(params, data) {
return(SimpleRSAModelUttKLDiv_3params_iterative(data, abs(params[1]), abs(params[2]), 1))
}
SimpleRSAModelUttKLDivParamABK_iterative <- function(params, data) {
return(SimpleRSAModelUttKLDiv_3params_iterative(data, abs(params[1]), abs(params[2]), params[3]))
}
SimpleRSAModelUttKLDiv_3params_independent <- function(data, par1, par2, par3) {
#   print(c(par1, par2, par3, data))
logLik <- 0
for(i in c(1:nrow(data))) {
preferencesPriorAll <- getPreferencesPrior(data[i,5]) # focussing on the feature type in question.
## determining the object and utterance
currentObjects <- c(data[i,1],data[i,2],data[i,3])
#    numUtterances <- data[i,4]
uttFeat <- data[i,4]
targetFeat <- data[i, 5]
pickedUtterance <- data[i, 6]
relevantUtterances <- determineValidUtterances(currentObjects)
irrelevantIndices <- which(relevantUtterances>(3*(data[i,5]-1)) &
relevantUtterances<(3*data[i,5] + 1))
validUtterances <- relevantUtterances[-irrelevantIndices]
## determining the model predictions
#################      Code below not edited ############
bInfGainUttModel <- rep(NA, 9)
output <- getSimpleBestInfGainUttPreferencesIterative(preferencesPriorAll,currentObjects, abs(par1),
abs(par2), par3, targetFeat)
bInfGainUttModel[relevantUtterances] <- output[[1]]
#   preferencesPriorAll <- output[[2]][pickedUtterance,,1]
## adding the negative log likelihoods
logLik <- logLik - log(bInfGainUttModel[relevantUtterances[pickedUtterance]] + 1e-100)
if (bInfGainUttModel[relevantUtterances[pickedUtterance]] == 0){
print('#####################')
print(bInfGainUttModel)
print(relevantUtterances)
print(validUtterances)
print(pickedUtterance)
print(currentObjects)
print()
print(allObjects[currentObjects,])
}
#    print(logLik)
}
#  print(c("Result: ", llRes, par1, par2, par3) )
return(logLik)
}
SimpleRSAModelUttKLDivParamA_independent <- function(par, data) {
return(SimpleRSAModelUttKLDiv_3params_independent(data, abs(par[1]), 0, 1))
}
SimpleRSAModelUttKLDivParamB_independent <- function(par, data) {
return(SimpleRSAModelUttKLDiv_3params_independent(data, 0, abs(par[1]), 1))
}
SimpleRSAModelUttKLDivParamK_independent <- function(par, data) {
return(SimpleRSAModelUttKLDiv_3params_independent(data, 0, 0, par[1]))
}
SimpleRSAModelUttKLDivParamBK_independent <- function(params, data) {
return(SimpleRSAModelUttKLDiv_3params_independent(data, 0, abs(params[1]), params[2]))
}
SimpleRSAModelUttKLDivParamAK_independent <- function(params, data) {
return(SimpleRSAModelUttKLDiv_3params_independent(data, abs(params[1]), 0, params[2]))
}
SimpleRSAModelUttKLDivParamAK.2_independent <- function(params, data) {
return(SimpleRSAModelUttKLDiv_3params_independent(data, abs(params[1]), 0.2, params[2]))
}
SimpleRSAModelUttKLDivParamA.2_independent <- function(par, data) {
return(SimpleRSAModelUttKLDiv_3params_independent(data, abs(par[1]), 0.2, 1))
}
SimpleRSAModelUttKLDivParamB.2_independent <- function(par, data) {
return(SimpleRSAModelUttKLDiv_3params_independent(data, 0.2, abs(par[1]), 1))
}
SimpleRSAModelUttKLDivParamK.2.2_independent <- function(par, data) {
return(SimpleRSAModelUttKLDiv_3params_independent(data, 0.2, 0.2, par[1]))
}
SimpleRSAModelUttKLDivParamK.2.0_independent <- function(par, data) {
return(SimpleRSAModelUttKLDiv_3params_independent(data, 0.2, 0, par[1]))
}
SimpleRSAModelUttKLDivParamBK.2_independent <- function(params, data) {
return(SimpleRSAModelUttKLDiv_3params_independent(data, 0.2, abs(params[1]), params[2]))
}
SimpleRSAModelUttKLDivParamAK.2_independent <- function(params, data) {
return(SimpleRSAModelUttKLDiv_3params_independent(data, abs(params[1]), 0.2, params[2]))
}
SimpleRSAModelUttKLDivParamAB_independent <- function(params, data) {
return(SimpleRSAModelUttKLDiv_3params_independent(data, abs(params[1]), abs(params[2]), 1))
}
SimpleRSAModelUttKLDivParamABK_independent <- function(params, data) {
return(SimpleRSAModelUttKLDiv_3params_independent(data, abs(params[1]), abs(params[2]), params[3]))
}
#Testing optimization function
currentObjects <- c(1,2,6)
#currentObjects <- c(26,20,23)
notObeyInst <- 1000
klValueFactor <- 1
softPrefValue <- 1000
targetFeature <- 2
trial <- 1
utt <- 5
obj <- 1
if (trial-1%%4 == 0){
preferencesPriorAll <- getPreferencesPrior(targetFeature)
}
output <-  getSimpleBestInfGainUttPreferencesIterative(
preferencesPriorAll, currentObjects,
softPrefValue, notObeyInst, klValueFactor, targetFeature)
posteriorUtterances <- round(output[[1]],3)
preferencesPriorAll <- round(output[[2]][utt,,obj],3)
##########################################
source("teamprojekt_CommonCode/AllUtterancesAndObjects.R")
source("teamprojekt_CommonCode/getConstCodeStratUtt.R")
source("teamprojekt_CommonCode/SRSA_StratUtt.R")
source("teamprojekt_CommonCode/SRSA_StratUttOptimization_iterative.R")
